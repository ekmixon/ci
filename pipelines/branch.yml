# the following vars must be specified:
#
#   ((branch))       the name of the branch to test/build
#   ((branch_slug))  a friendly form of the branch to use for artifacts. may be the same as branch
resource_types:
- name: gcs
  type: registry-image
  source: {repository: frodenas/gcs-resource}

- name: slack-notifier
  type: registry-image
  # Switch back to mockersf/concourse-slack-notifier once
  # https://github.com/mockersf/concourse-slack-notifier/pull/86 is merged
  source: {repository: aoldershaw/concourse-slack-notifier}

# TODO: get rid of this when https://github.com/concourse/concourse/issues/7284 is fixed
- name: github-release
  type: registry-image
  source: {repository: aoldershaw/github-release-resource}

jobs:
- name: unit
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: concourse
      trigger: true
    - get: unit-image
      trigger: true
    - get: ci
  - task: yarn-test
    image: unit-image
    file: ci/tasks/yarn-test.yml
  - timeout: 1h
    in_parallel:
    - task: unit
      image: unit-image
      file: ci/tasks/unit.yml
      input_mapping: {concourse: built-concourse}
    - task: fly-darwin
      file: ci/tasks/fly-darwin.yml
    - task: fly-windows
      file: ci/tasks/fly-windows.yml
    - task: unit-baggageclaim
      image: unit-image
      file: ci/tasks/unit-baggageclaim.yml
      privileged: true
      input_mapping: {concourse: built-concourse}
    - task: unit-baggageclaim-darwin
      file: ci/tasks/unit-baggageclaim-darwin.yml
      input_mapping: {concourse: built-concourse}
    - task: unit-baggageclaim-windows
      file: ci/tasks/unit-baggageclaim-windows.yml
      input_mapping: {concourse: built-concourse}
  on_failure: &failed-concourse
    put: notify
    params:
      mode: normal
      alert_type: failed

- name: dev-image
  public: true
  serial: true
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: concourse
        trigger: true
      - get: golang-builder-image
        trigger: true
        params: {format: oci}
      - get: golang-builder-image-rootfs
        resource: golang-builder-image
        trigger: true
        params: {format: rootfs}
      - get: gdn
        trigger: true
      - get: containerd
        trigger: true
      - get: runc
        trigger: true
      - get: cni
        trigger: true
      - get: dumb-init
        trigger: true
      - get: resource-types-alpine-image
      - get: unit-image
      - get: oci-build-task
      - get: ci
  - in_parallel:
      fail_fast: true
      steps:
      - task: yarn-build
        image: unit-image
        file: ci/tasks/yarn-build.yml
      - task: fly-linux
        file: ci/tasks/fly-build-linux.yml
        image: golang-builder-image-rootfs
      - task: fly-windows
        file: ci/tasks/fly-build-windows.yml
      - task: fly-darwin
        file: ci/tasks/fly-build-darwin.yml
  - task: build
    image: oci-build-task
    privileged: true
    input_mapping: {concourse: built-concourse, resource-types-image: resource-types-alpine-image}
    file: ci/tasks/build-dev-image.yml
  - put: dev-image
    params: {image: image/image.tar}
    get_params: {format: oci}
  on_failure: *failed-concourse

- name: containerd-integration
  public: true
  max_in_flight: 1
  plan:
  - in_parallel:
    - get: concourse
      passed: [unit, dev-image]
      trigger: true
    - get: dev-image
      passed: [dev-image]
      trigger: true
    - get: ci
  - task: integration
    image: dev-image
    privileged: true
    timeout: 1h
    file: ci/tasks/containerd-integration.yml
  on_failure: *failed-concourse

- name: testflight
  public: true
  max_in_flight: 1
  plan:
  - in_parallel:
    - get: concourse
      passed: [unit, dev-image]
      trigger: true
    - get: unit-image
    - get: dev-image
      passed: [dev-image]
      trigger: true
      params: {format: oci}
    - get: postgres-image
      params: {format: oci}
    - get: postgres-image-legacy
      params: {format: oci}
    - get: ci
  - across:
    - var: runtime
      values:
      - guardian
      - containerd
      max_in_flight: all
    - var: postgres-image
      values:
      - postgres-image
      - postgres-image-legacy
      max_in_flight: all
    task: testflight
    image: unit-image
    privileged: true
    timeout: 1h
    params:
      RUNTIME: ((.:runtime))
    file: ci/tasks/docker-compose-testflight.yml
    input_mapping: {postgres-image: ((.:postgres-image))}
  on_failure: *failed-concourse

- name: watsjs
  public: true
  max_in_flight: 1
  plan:
  - in_parallel:
    - get: concourse
      passed: [unit, dev-image]
      trigger: true
    - get: unit-image
    - get: dev-image
      passed: [dev-image]
      trigger: true
      params: {format: oci}
    - get: postgres-image
      params: {format: oci}
    - get: ci
  - task: watsjs
    image: unit-image
    privileged: true
    timeout: 1h
    file: ci/tasks/docker-compose-watsjs.yml
  on_failure: *failed-concourse

- name: integration
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: concourse
      passed: [unit, dev-image]
      trigger: true
    - get: dev-image
      passed: [dev-image]
      params: {format: oci}
      trigger: true
    - get: unit-image
    - get: concourse-image
      params: {format: oci}
    - get: postgres-image
      params: {format: oci}
    - get: vault-image
      params: {format: oci}
    - get: ci
  - task: integration
    privileged: true
    image: unit-image
    file: ci/tasks/integration.yml
  on_failure: *failed-concourse

- name: build-concourse
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: concourse
      passed: [dev-image, testflight, watsjs, integration]
      trigger: true
    - get: unit-image
      passed: [dev-image]
    - get: dev-image
      passed: [dev-image]
      trigger: true
    - get: golang-builder-image
      passed: [dev-image]
    - get: ci
    - get: resource-types-alpine-image
      passed: [dev-image]
  - in_parallel:
    - task: fly-linux
      file: ci/tasks/fly-build-linux.yml
      image: golang-builder-image
    - task: fly-windows
      file: ci/tasks/fly-build-windows.yml
    - task: fly-darwin
      file: ci/tasks/fly-build-darwin.yml
  - in_parallel:
      fail_fast: true
      steps:
        - task: hoist-linux-dependencies
          file: ci/tasks/hoist-linux-dependencies.yml
          image: dev-image
        - task: hoist-resource-types-alpine
          file: ci/tasks/hoist-linux-resource-types.yml
          image: resource-types-alpine-image
          output_mapping: {resource-types: resource-types-alpine}
        - task: yarn-build
          file: ci/tasks/yarn-build.yml
          image: unit-image
  - task: get-dev-version
    file: ci/tasks/get-dev-version.yml
    image: golang-builder-image
  - in_parallel:
      fail_fast: true
      steps:
      - task: concourse-linux-alpine
        file: ci/tasks/concourse-build-linux.yml
        image: golang-builder-image
        params:
          PLATFORM: linux
        input_mapping: {concourse: built-concourse, resource-types: resource-types-alpine}
        output_mapping: {concourse-tarball: concourse-linux-alpine}
      - task: concourse-windows
        file: ci/tasks/concourse-build-windows.yml
        input_mapping: {concourse: built-concourse}
      - task: concourse-darwin
        file: ci/tasks/concourse-build-darwin.yml
        input_mapping: {concourse: built-concourse}
        output_mapping: {concourse-tarball: concourse-darwin}
  - in_parallel:
    - put: linux-dev-alpine
      params: {file: concourse-linux-alpine/concourse-*.tgz}
      inputs: [concourse-linux-alpine]
    - put: windows-dev
      params: {file: concourse-windows/concourse-*.zip}
      inputs: [concourse-windows]
    - put: darwin-dev
      params: {file: concourse-darwin/concourse-*.tgz}
      inputs: [concourse-darwin]
  on_failure: *failed-concourse

- name: build-image
  old_name: build-rc-image
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: concourse
      passed: [build-concourse]
      trigger: true
    - get: unit-image
    - get: linux-dev-alpine
      trigger: true
      passed: [build-concourse]
    - get: concourse-docker
      trigger: true
    - get: oci-build-task
    - get: ci
  - task: build-alpine
    file: concourse-docker/ci/build-image.yml
    image: oci-build-task
    input_mapping: {linux-rc: linux-dev-alpine}
    output_mapping: {image: image-alpine}
    privileged: true
  - put: concourse-dev-alpine-image
    inputs: [image-alpine]
    params:
      image: image-alpine/image.tar
  on_failure: *failed-concourse

- name: bin-smoke
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: concourse
      passed: [build-concourse]
      trigger: true
    - get: linux-dev-alpine
      passed: [build-concourse]
      trigger: true
    - get: unit-image
    - get: ci
  - across:
    - var: runtime
      values:
      - guardian
      - containerd
      max_in_flight: all
    do:
    - task: terraform-smoke
      image: unit-image
      file: ci/tasks/terraform-smoke.yml
      input_mapping: {linux-rc: linux-dev-alpine}
      params:
        GCP_PROJECT: cf-concourse-production
        GCP_KEY: ((concourse_smoke_gcp_key))
        SSH_KEY: ((concourse_smoke_ssh_key))
        WORKSPACE: branch-((branch_slug))-bin-smoke-((.:runtime))
        TF_VAR_RUNTIME: ((.:runtime))
    - task: smoke
      image: unit-image
      file: ci/tasks/smoke.yml
      input_mapping: {endpoint-info: outputs}
    timeout: 20m
  on_failure: *failed-concourse

- name: bin-smoke-lts
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: concourse
      passed: [build-concourse]
      trigger: true
    - get: linux-dev-alpine
      passed: [build-concourse]
      trigger: true
    - get: unit-image
    - get: ci
  - across:
    - var: runtime
      values:
      - guardian
      - containerd
      max_in_flight: all
    - var: gcp-image
      values:
      - debian-10-buster-v20210122
      - ubuntu-1604-lts
      - ubuntu-1804-lts
      - ubuntu-2004-lts
      max_in_flight: 1
    do:
    - task: terraform-smoke
      image: unit-image
      file: ci/tasks/terraform-smoke.yml
      input_mapping: {linux-rc: linux-dev-alpine}
      params:
        GCP_PROJECT: cf-concourse-production
        GCP_KEY: ((concourse_smoke_gcp_key))
        SSH_KEY: ((concourse_smoke_ssh_key))
        WORKSPACE: branch-((branch_slug))-bin-smoke-lts-((.:runtime))
        TF_VAR_GCP_IMAGE: ((.:gcp-image))
        TF_VAR_RUNTIME: ((.:runtime))
    - task: smoke
      image: unit-image
      file: ci/tasks/smoke.yml
      input_mapping: {endpoint-info: outputs}
    timeout: 20m
  on_failure: *failed-concourse

- name: bump-prod-web
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: infrastructure
    - get: concourse-image
      resource: concourse-dev-alpine-image
      passed: [build-image]
      params: {skip_download: true}
  - load_var: concourse_image_repo
    file: concourse-image/repository
  - load_var: concourse_image_digest
    file: concourse-image/digest
  - task: bump-versions
    file: infrastructure/tasks/patch-yaml.yml
    input_mapping: {repo: infrastructure}
    output_mapping: {repo-bumped: infrastructure-bumped}
    params:
      FILE: terraform/environments/production/variables.yml
      PATCH:
        concourse_web_image_repo: ((.:concourse_image_repo))
        concourse_web_image_digest: ((.:concourse_image_digest))
      COMMIT: bump production web to branch ((branch))
  - put: infrastructure-bump
    inputs: [infrastructure-bumped]
    params:
      repository: infrastructure-bumped
      branch: master
  on_failure: *failed-concourse

- name: bump-prod-workers
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: infrastructure
    - get: concourse-image
      resource: concourse-dev-alpine-image
      passed: [build-image]
      params: {skip_download: true}
    - get: windows-dev
      passed: [build-concourse]
      params: {skip_download: "true"}
    - get: darwin-dev
      passed: [build-concourse]
      params: {skip_download: "true"}
  - load_var: concourse_image_repo
    file: concourse-image/repository
  - load_var: concourse_image_digest
    file: concourse-image/digest
  - task: convert-windows-url
    file: infrastructure/tasks/convert-gs-url.yml
    input_mapping: {input: windows-dev}
    output_mapping: {output: windows}
  - task: convert-darwin-url
    file: infrastructure/tasks/convert-gs-url.yml
    input_mapping: {input: darwin-dev}
    output_mapping: {output: darwin}
  - load_var: concourse_windows_bundle_url
    file: windows/url
  - load_var: concourse_darwin_bundle_url
    file: darwin/url
  - task: bump-versions
    file: infrastructure/tasks/patch-yaml.yml
    input_mapping: {repo: infrastructure}
    output_mapping: {repo-bumped: infrastructure-bumped}
    params:
      FILE: terraform/environments/production/variables.yml
      PATCH:
        concourse_worker_image_repo: ((.:concourse_image_repo))
        concourse_worker_image_digest: ((.:concourse_image_digest))
        concourse_windows_bundle_url: ((.:concourse_windows_bundle_url))
        concourse_darwin_bundle_url: ((.:concourse_darwin_bundle_url))
      COMMIT: bump production workers to branch ((branch))
  - put: infrastructure-bump
    inputs: [infrastructure-bumped]
    params:
      repository: infrastructure-bumped
      branch: master
  on_failure: *failed-concourse

resources:
- name: concourse
  type: git
  icon: &git-icon github
  source:
    uri: https://github.com/concourse/concourse.git
    branch: ((branch))

# - name: concourse-master
#   type: git
#   icon: *git-icon
#   source:
#     uri: https://github.com/concourse/concourse.git
#     branch: master

- name: ci
  type: git
  icon: *git-icon
  source:
    uri: https://github.com/concourse/ci.git
    branch: master

- name: infrastructure
  type: git
  icon: github
  source:
    uri: git@github.com:concourse/infrastructure.git
    private_key: ((greenpeace_private_key))

- name: infrastructure-bump
  type: git
  icon: github
  source:
    uri: git@github.com:concourse/infrastructure.git
    branch: master
    private_key: ((greenpeace_private_key))

- name: notify
  type: slack-notifier
  icon: slack
  source:
    url: ((slack_hooks.concourse-interrupt))
    username: ((basic_auth.username))
    password: ((basic_auth.password))
    concourse_url: https://ci.concourse-ci.org

- name: dev-image
  type: registry-image
  icon: &image-icon docker
  source:
    repository: concourse/dev
    tag: branch-((branch_slug))
    username: ((docker.username))
    password: ((docker.password))

- name: concourse-image
  type: registry-image
  icon: *image-icon
  source:
    repository: concourse/concourse
    tag: latest
    username: ((docker.username))
    password: ((docker.password))

- name: unit-image
  type: registry-image
  icon: *image-icon
  source:
    repository: concourse/unit
    tag: latest
    username: ((docker.username))
    password: ((docker.password))

- name: golang-builder-image
  type: registry-image
  icon: *image-icon
  source:
    repository: concourse/golang-builder
    username: ((docker.username))
    password: ((docker.password))
    variant: bionic

- name: postgres-image
  type: registry-image
  icon: *image-icon
  source: {repository: postgres}

- name: postgres-image-legacy
  type: registry-image
  icon: *image-icon
  source: {repository: postgres, tag: 9.5}

- name: vault-image
  type: registry-image
  icon: *image-icon
  source: {repository: vault}

- name: dumb-init
  type: github-release
  icon: &release-icon package-variant-closed
  source:
    owner: Yelp
    repository: dumb-init
    access_token: ((concourse_github_dummy.access_token))

- name: gdn
  type: github-release
  icon: *release-icon
  source:
    owner: cloudfoundry
    repository: garden-runc-release
    access_token: ((concourse_github_dummy.access_token))

- name: containerd
  type: github-release
  icon: *release-icon
  source:
    owner: containerd
    repository: containerd
    access_token: ((concourse_github_dummy.access_token))

- name: runc
  type: github-release
  icon: *release-icon
  source:
    owner: opencontainers
    repository: runc
    access_token: ((concourse_github_dummy.access_token))

- name: cni
  type: github-release
  icon: *release-icon
  source:
    owner: containernetworking
    repository: plugins
    access_token: ((concourse_github_dummy.access_token))

- name: oci-build-task
  type: registry-image
  icon: *image-icon
  source: {repository: vito/oci-build-task}

- name: linux-dev-alpine
  type: gcs
  icon: linux
  source:
    bucket: concourse-artifacts
    json_key: ((concourse_artifacts_json_key))
    regexp: branch/((branch_slug))/concourse-(.*)\.linux-alpine\.amd64\.tgz

- name: windows-dev
  type: gcs
  icon: microsoft-windows
  source:
    bucket: concourse-artifacts
    json_key: ((concourse_artifacts_json_key))
    regexp: branch/((branch_slug))/concourse-(.*)\.windows\.amd64\.zip

- name: darwin-dev
  type: gcs
  icon: apple
  source:
    bucket: concourse-artifacts
    json_key: ((concourse_artifacts_json_key))
    regexp: branch/((branch_slug))/concourse-(.*)\.darwin\.amd64\.tgz

- name: concourse-docker
  type: git
  icon: *git-icon
  source:
    uri: https://github.com/concourse/concourse-docker

- name: resource-types-alpine-image
  type: registry-image
  icon: &image-icon docker
  source:
    repository: concourse/resource-types
    tag: latest
    username: ((docker.username))
    password: ((docker.password))

- name: concourse-dev-alpine-image
  type: registry-image
  icon: *image-icon
  source:
    repository: concourse/concourse-dev
    tag: branch-((branch_slug))
    username: ((docker.username))
    password: ((docker.password))
